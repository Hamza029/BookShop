/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookshop;

//import java.time.LocalDateTime;
//import java.time.format.DateTimeFormatter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class DealerPanelUI extends javax.swing.JFrame {
    
    Book book;
    Book prevBook;
    Operations op = new Operations();
    DefaultTableModel model;

    /**
     * Creates new form DealerPanelUI
     */
    public DealerPanelUI() {
        initComponents();
        
        if(CurrentUser.getType().equals("Admin")) {
            logoutBtn.setText("Back");
//            insertBtn.setEnabled(false);
//            updateBtn.setEnabled(false);
//            removeBtn.setEnabled(false);
        }
        
        model = (DefaultTableModel) bTable.getModel();
        show_all();
    }
    
    public Book makeBook() {
        int bID = Integer.parseInt(bIDText.getText());
        String bName = bNameText.getText();
        String author = authorText.getText();
        String category = categoryText.getText();
        int buyingPrice = Integer.parseInt(buyingPriceText.getText());
        int sellingPrice = Integer.parseInt(sellingPriceText.getText());
        int copies = Integer.parseInt(copiesText.getText());
        Book tmp = new Book(bID, bName, author, category, buyingPrice, sellingPrice, copies);
        return tmp;
    }
    
    public int getSelectedRowIndex() {
        int selectedRowIndex = bTable.getSelectedRow();
        bIDText.setText(model.getValueAt(selectedRowIndex, 0).toString());
        bNameText.setText(model.getValueAt(selectedRowIndex, 1).toString());
        authorText.setText(model.getValueAt(selectedRowIndex, 2).toString());
        categoryText.setText(model.getValueAt(selectedRowIndex, 3).toString());
        buyingPriceText.setText(model.getValueAt(selectedRowIndex, 4).toString());
        sellingPriceText.setText(model.getValueAt(selectedRowIndex, 5).toString());
        copiesText.setText(model.getValueAt(selectedRowIndex, 6).toString());
        return selectedRowIndex;
    }
    
    public void show_all() {
        ArrayList<Book> list = op.showBook();
//        System.out.println("list size = " + list.size());
        
        Object row[] = new Object[7];
        
        model.setRowCount(0);
        
        for(int i=0; i<list.size(); i++) {
            row[0] = list.get(i).getbID();
            row[1] = list.get(i).getbName();
            row[2] = list.get(i).getAuthor();
            row[3] = list.get(i).getCategory();
            row[4] = list.get(i).getBuyingPrice();
            row[5] = list.get(i).getSellingPrice();
            row[6] = list.get(i).getCopies();
            model.addRow(row);
        }
    }
    
    public void show_all(String searchType, String search) {
        ArrayList<Book> list = op.showBook(searchType, search);
//        System.out.println("list size = " + list.size());
        
        Object row[] = new Object[7];
        
        model.setRowCount(0);
        
        for(int i=0; i<list.size(); i++) {
            row[0] = list.get(i).getbID();
            row[1] = list.get(i).getbName();
            row[2] = list.get(i).getAuthor();
            row[3] = list.get(i).getCategory();
            row[4] = list.get(i).getBuyingPrice();
            row[5] = list.get(i).getSellingPrice();
            row[6] = list.get(i).getCopies();
            model.addRow(row);
        }
    }
    
    public String getDate() {
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String sdate = formatter.format(date);
        
//        String date = dtf.format(now);
        
//        System.out.println(s);
        return sdate;
    }
    
    public void makeDeal(String dealInfo) {
        DBCon dbc = new DBCon();
        try {
            dbc.connectToDB();
            String query = "INSERT INTO Deals (dealDate,username,dealInfo) " + 
                "VALUES ('" + getDate() + "', '" + CurrentUser.getUsername() + "', '" + dealInfo + "')";
//            System.out.println(query);
            dbc.insertIntoDB(query);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            dbc.disconnectFromDB();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        bNameText = new javax.swing.JTextField();
        authorText = new javax.swing.JTextField();
        bIDText = new javax.swing.JTextField();
        categoryText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        buyingPriceText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        sellingPriceText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        copiesText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        insertBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        jComboBoxSearch = new javax.swing.JComboBox<>();
        logoutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Name", "Author", "Category", "Buying Price", "Selling Price", "Copies"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bTable);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Dealer Panel");

        authorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorTextActionPerformed(evt);
            }
        });

        jLabel5.setText("ID");

        jLabel2.setText("Name");

        jLabel3.setText("Author");

        jLabel4.setText("Category");

        jLabel6.setText("Buying Price");

        jLabel7.setText("Selling Price");

        jLabel8.setText("Copies");

        insertBtn.setText("Insert");
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        jComboBoxSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Book ID", "Name", "Author", "Category" }));
        jComboBoxSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSearchActionPerformed(evt);
            }
        });

        logoutBtn.setForeground(new java.awt.Color(255, 64, 80));
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(copiesText)
                                            .addComponent(sellingPriceText)
                                            .addComponent(buyingPriceText)
                                            .addComponent(categoryText)
                                            .addComponent(authorText, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(bIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(insertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeBtn)))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addComponent(logoutBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(authorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyingPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sellingPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copiesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateBtn)
                            .addComponent(insertBtn)
                            .addComponent(removeBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void authorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorTextActionPerformed

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        // TODO add your handling code here:
        book = makeBook();
        op.insertBook(book);
        show_all();
        
        String dealInfo = "------ Inserted new book ------\n" + 
                        "Book ID = " + book.getbID() + "\n" +
                        "Book Name = " + book.getbName() + "\n" + 
                        "Copies = " + book.getCopies();
        
//        System.out.println(dealInfo);
        
        if(CurrentUser.isSuccessfulOperation()) makeDeal(dealInfo);
    }//GEN-LAST:event_insertBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        book = makeBook();
        op.updateBook(book);
        show_all();
        
        String dealInfo = "------ Updated a book ------\n" + 
                        "Book ID = " + book.getbID() + "\n" +
                        "Book Name = " + book.getbName() + "\n" + 
                        "Copies = " + book.getCopies() + "\n\n" +
                        "------ Changes ------";
        
        if(!prevBook.getbName().equals(book.getbName())) {
            dealInfo += "\nBook Name: " + prevBook.getbName() + " --> " + book.getbName();
        }
        if(!prevBook.getAuthor().equals(book.getAuthor())) {
            dealInfo += "\nAuthor: " + prevBook.getAuthor() + " --> " + book.getAuthor();
        }
        if(!prevBook.getbName().equals(book.getbName())) {
            dealInfo += "\nCategory: " + prevBook.getCategory()+ " --> " + book.getCategory();
        }
        if(prevBook.getBuyingPrice() != book.getBuyingPrice()) {
            dealInfo += "\nBuying Price: " + prevBook.getBuyingPrice()+ " --> " + book.getBuyingPrice();
        }
        if(prevBook.getSellingPrice()!= book.getSellingPrice()) {
            dealInfo += "\nSelling Price: " + prevBook.getSellingPrice() + " --> " + book.getSellingPrice();
        }
        if(prevBook.getCopies() != book.getCopies()) {
            dealInfo += "\nCopies: " + prevBook.getCopies() + " --> " + book.getCopies();
        }
        
//        System.out.println(dealInfo);
        
        if(CurrentUser.isSuccessfulOperation()) makeDeal(dealInfo);
    }//GEN-LAST:event_updateBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        int selecedRowIndex = getSelectedRowIndex();
        int bID = (int) model.getValueAt(selecedRowIndex, 0);
        op.deleteBook(bID);
        show_all();
        book = makeBook();
        String dealInfo = "------ Removed a book ------\n" + 
                        "Book ID = " + book.getbID() + "\n" +
                        "Book Name = " + book.getbName() + "\n" + 
                        "Copies = " + book.getCopies();
        
//        System.out.println(dealInfo);
        
        if(CurrentUser.isSuccessfulOperation()) makeDeal(dealInfo);
    }//GEN-LAST:event_removeBtnActionPerformed

    private void bTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bTableMouseClicked
        // TODO add your handling code here:
        getSelectedRowIndex();
        prevBook = makeBook();
    }//GEN-LAST:event_bTableMouseClicked

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        if(CurrentUser.getType().equals("Admin")) {
            AdminHomeUI adUI = new AdminHomeUI();
            adUI.setVisible(true);
        }
        else {
            LoginUI loginUI = new LoginUI();
            loginUI.setVisible(true);
        }
        dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        // TODO add your handling code here:
        
        String search = searchText.getText();
        String searchType = jComboBoxSearch.getSelectedItem().toString();
        if(searchType.equals("Book ID")) {
            searchType = "bID";
        }
        else if(searchType.equals("Name")) {
            searchType = "bName";
        }
        else if(searchType.equals("Author")) {
            searchType = "author";
        }
        else {
            searchType = "category";
        }
        if(search.isEmpty()) {
            show_all();
        }
        else {
            show_all(searchType, search);
        }
        
    }//GEN-LAST:event_searchTextKeyReleased

    private void jComboBoxSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSearchActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DealerPanelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DealerPanelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DealerPanelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DealerPanelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DealerPanelUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorText;
    private javax.swing.JTextField bIDText;
    private javax.swing.JTextField bNameText;
    private javax.swing.JTable bTable;
    private javax.swing.JTextField buyingPriceText;
    private javax.swing.JTextField categoryText;
    private javax.swing.JTextField copiesText;
    private javax.swing.JButton insertBtn;
    private javax.swing.JComboBox<String> jComboBoxSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JTextField searchText;
    private javax.swing.JTextField sellingPriceText;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
